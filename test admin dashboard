3. User Management (/admin/users)

  Test the following features:

  a. User List

  - Check if users are displayed in the table
  - Verify user information shows correctly (email, role, plan, status)

  b. Search & Filters

  - Try searching for a user by email
  - Test the role filter (All Roles, User, Admin, Super Admin)
  - Test the plan filter (Free, Starter, Professional, Enterprise)
  - Test the status filter (Active, Trialing, Canceled, Inactive)

  c. Pagination

  - If you have multiple users, test the pagination buttons
  - Check that page numbers update correctly

  4. User Details Page (/admin/users/[id])

  Click on a user's view button (eye icon) and test:

  a. User Information Display

  - Verify all user details load correctly
  - Check that usage statistics are shown (posts, drafts, connected accounts)

  b. Role Management (Critical Test)

  - Try changing a test user's role from "user" to "admin"
  - Change it back to "user"
  - Verify the role updates correctly

  c. Account Actions

  - Test the "Suspend Account" button on a test user
  - Test the "Activate Account" button to reactivate
  - Verify these changes take effect

  5. Analytics Page (/admin/analytics)

  Check that:
  - All metrics load properly
  - Revenue calculations are correct
  - User metrics display accurately
  - Content metrics show correct counts

  6. Audit Log (/admin/audit)

  After performing the above actions, check:
  - Your actions appear in the audit log
  - Timestamps are correct
  - Action types are properly categorized
  - Filters work correctly

  7. Settings Page (/admin/settings)

  Test:
  - Toggle switches respond to clicks
  - Save Settings button shows success message
  - Form inputs accept values

  üîç Important Things to Test

  Create Test Scenarios:

  1. Create a test user account (use an incognito browser):
    - Sign up with a different email
    - Try to access /admin (should be denied)
    - Go back to your admin account
  2. Test the admin API directly:
  # In browser console while logged in as admin
  fetch('/api/admin/users?stats=true')
    .then(r => r.json())
    .then(console.log)
  3. Test permission boundaries:
    - Create another admin user (not super_admin)
    - Log in as that admin
    - Verify they can't change user roles
    - Verify they can view but not modify critical settings

  üêõ Common Issues to Check For

  1. Loading States:
    - Do pages show loading spinners while fetching data?
    - Any console errors in browser DevTools?
  2. Error Handling:
    - What happens if you try to view a non-existent user ID?
    - Does the system handle network errors gracefully?
  3. Data Accuracy:
    - Do user counts match your actual database?
    - Are subscription statuses accurate?
  4. Responsive Design:
    - Test on mobile/tablet viewport
    - Check if tables scroll horizontally on small screens

  üìù Quick Test Script

  Here's a SQL query to verify your data setup:

  -- Check admin setup health
  SELECT
    'Total Users' as metric,
    COUNT(*) as count
  FROM auth.users
  UNION ALL
  SELECT
    'Super Admins' as metric,
    COUNT(*) as count
  FROM user_subscriptions
  WHERE role = 'super_admin'
  UNION ALL
  SELECT
    'Regular Admins' as metric,
    COUNT(*) as count
  FROM user_subscriptions
  WHERE role = 'admin'
  UNION ALL
  SELECT
    'Audit Log Entries' as metric,
    COUNT(*) as count
  FROM admin_audit_log;

  üéØ Next Steps After Testing

  Once you've tested everything:

  1. Document any issues you find
  2. Create additional admin users if needed for your team
  3. Set up monitoring for critical admin actions
  4. Consider adding email notifications for important events
  5. Export a backup of your admin configuration